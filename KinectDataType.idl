#ifndef KINECT_DATA_TYPE_IDL_INCLUDED
#define KINECT_DATA_TYPE_IDL_INCLUDED

module Kinect {

  enum NUI_SKELETON_TRACKING_STATE {
    NUI_SKELETON_NOT_TRACKED,
    NUI_SKELETON_POSITION_ONLY,
    NUI_SKELETON_TRACKED
  } ;

  enum NUI_SKELETON_POSITION_TRACKING_STATE {
    NUI_SKELETON_POSITION_NOT_TRACKED,
    NUI_SKELETON_POSITION_INFERRED,
    NUI_SKELETON_POSITION_TRACKED
  } ;

  enum NUI_SKELETON_POSITION_INDEX {
    NUI_SKELETON_POSITION_HIP_CENTER,
    NUI_SKELETON_POSITION_SPINE,
    NUI_SKELETON_POSITION_SHOULDER_CENTER,
    NUI_SKELETON_POSITION_HEAD,
    NUI_SKELETON_POSITION_SHOULDER_LEFT,
    NUI_SKELETON_POSITION_ELBOW_LEFT,
    NUI_SKELETON_POSITION_WRIST_LEFT,
    NUI_SKELETON_POSITION_HAND_LEFT,
    NUI_SKELETON_POSITION_SHOULDER_RIGHT,
    NUI_SKELETON_POSITION_ELBOW_RIGHT,
    NUI_SKELETON_POSITION_WRIST_RIGHT,
    NUI_SKELETON_POSITION_HAND_RIGHT,
    NUI_SKELETON_POSITION_HIP_LEFT,
    NUI_SKELETON_POSITION_KNEE_LEFT,
    NUI_SKELETON_POSITION_ANKLE_LEFT,
    NUI_SKELETON_POSITION_FOOT_LEFT,
    NUI_SKELETON_POSITION_HIP_RIGHT,
    NUI_SKELETON_POSITION_KNEE_RIGHT,
    NUI_SKELETON_POSITION_ANKLE_RIGHT,
    NUI_SKELETON_POSITION_FOOT_RIGHT,
    NUI_SKELETON_POSITION_COUNT
  };

  enum NUI_IMAGE_TYPE {
    NUI_IMAGE_TYPE_DEPTH_AND_PLAYER_INDEX,
    NUI_IMAGE_TYPE_COLOR,
    NUI_IMAGE_TYPE_COLOR_YUV,
    NUI_IMAGE_TYPE_COLOR_RAW_YUV,
    NUI_IMAGE_TYPE_DEPTH,
    NUI_IMAGE_TYPE_DEPTH_AND_PLAYER_INDEX_IN_COLOR_SPACE,
    NUI_IMAGE_TYPE_DEPTH_IN_COLOR_SPACE,
    NUI_IMAGE_TYPE_COLOR_IN_DEPTH_SPACE
  } ;
 


   struct Vector4 {
     float v[4];
   };

   struct NuiSkeletonData {
     NUI_SKELETON_TRACKING_STATE trackingState;
     long trackingID;
     long enrollmentIndex;
     long userIndex;
     Vector4 position;
     Vector4 skeletonPositions;
     NUI_SKELETON_POSITION_TRACKING_STATE eSkeletonPositionTrackingState[20];
     long qualityFlags;
   };


   struct SoundSourceLocation {
     double angle;
     double confidence;
   };
};

#endif // #ifndef KINECT_DATA_TYPE_IDL_INCLUDED